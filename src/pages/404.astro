---

---

<div class="bg-[#FFEEDD] p-20 text-center flex-col flex justify-evenly h-screen w-full">
	<p class="text-4xl">Oooops the page you are looking does not exist!</p>
	<p class="text-2xl">But if you finish this level we will redirect you to the homepage ;p</p>
	<div class="gameboard box-content mx-auto"></div>
	<p class="text-xs text-right text-primary">
		kudos to <a href="https://github.com/kubowania/space-invaders">kubowania</a>
	</p>
</div>

<script type="text/partytown">
	const { href, search, pathname } = new URL(window.location.href);
	const address = 'https://broken.dyne.org/api/collections/broken_links/records';
	fetch(address, {
		method: 'post',
		headers: {
			Accept: 'application/json',
			'Content-Type': 'application/json',
		},
		body: JSON.stringify({ href, search, pathname }),
	}).then((res) => console.log(res));
</script>

<script is:inline>
	const gameboard = document.querySelector('.gameboard');
	const resultsDisplay = document.querySelector('.results');
	let currentShooterIndex = 202;
	let width = 15;
	let direction = 1;
	let invadersId;
	let goingRight = true;
	let aliensRemoved = [];
	let results = 0;

	for (let i = 0; i < 225; i++) {
		const square = document.createElement('div');
		gameboard.appendChild(square);
	}

	const squares = Array.from(document.querySelectorAll('.gameboard div'));

	const alienInvaders = [
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	];

	function draw() {
		for (let i = 0; i < alienInvaders.length; i++) {
			if (!aliensRemoved.includes(i)) {
				squares[alienInvaders[i]].classList.add('invader');
			}
		}
	}

	draw();

	function remove() {
		for (let i = 0; i < alienInvaders.length; i++) {
			squares[alienInvaders[i]].classList.remove('invader');
		}
	}

	squares[currentShooterIndex].classList.add('shooter');

	function moveShooter(e) {
		squares[currentShooterIndex].classList.remove('shooter');
		switch (e.key) {
			case 'ArrowLeft':
				if (currentShooterIndex % width !== 0) currentShooterIndex -= 1;
				break;
			case 'ArrowRight':
				if (currentShooterIndex % width < width - 1) currentShooterIndex += 1;
				break;
		}
		squares[currentShooterIndex].classList.add('shooter');
	}
	document.addEventListener('keydown', moveShooter);

	function moveInvaders() {
		const leftEdge = alienInvaders[0] % width === 0;
		const rightEdge = alienInvaders[alienInvaders.length - 1] % width === width - 1;
		remove();

		if (rightEdge && goingRight) {
			for (let i = 0; i < alienInvaders.length; i++) {
				alienInvaders[i] += width + 1;
				direction = -1;
				goingRight = false;
			}
		}

		if (leftEdge && !goingRight) {
			for (let i = 0; i < alienInvaders.length; i++) {
				alienInvaders[i] += width - 1;
				direction = 1;
				goingRight = true;
			}
		}

		for (let i = 0; i < alienInvaders.length; i++) {
			alienInvaders[i] += direction;
		}

		draw();

		if (squares[currentShooterIndex].classList.contains('invader', 'shooter')) {
			resultsDisplay.innerHTML = 'GAME OVER';
			clearInterval(invadersId);
		}

		for (let i = 0; i < alienInvaders.length; i++) {
			if (alienInvaders[i] > squares.length) {
				resultsDisplay.innerHTML = 'GAME OVER';
				clearInterval(invadersId);
			}
		}
		if (aliensRemoved.length === alienInvaders.length) {
			document.location = 'https://dyne.org';
		}
	}
	invadersId = setInterval(moveInvaders, 600);

	function shoot(e) {
		let laserId;
		let currentLaserIndex = currentShooterIndex;
		function moveLaser() {
			squares[currentLaserIndex].classList.remove('laser');
			currentLaserIndex -= width;
			squares[currentLaserIndex].classList.add('laser');

			if (squares[currentLaserIndex].classList.contains('invader')) {
				squares[currentLaserIndex].classList.remove('laser');
				squares[currentLaserIndex].classList.remove('invader');
				squares[currentLaserIndex].classList.add('boom');

				setTimeout(() => squares[currentLaserIndex].classList.remove('boom'), 300);
				clearInterval(laserId);

				const alienRemoved = alienInvaders.indexOf(currentLaserIndex);
				aliensRemoved.push(alienRemoved);
				results++;
				resultsDisplay.innerHTML = results;
			}
		}
		switch (e.key) {
			case ' ':
			case 'ArrowUp':
				laserId = setInterval(moveLaser, 100);
		}
	}

	document.addEventListener('keydown', shoot);
</script>

<style is:inline>
	.gameboard {
		width: 300px;
		height: 300px;
		display: flex;
		flex-wrap: wrap !important;
	}

	.gameboard div {
		width: 20px;
		height: 20px;
	}

	.invader {
		background-color: purple;
		border-radius: 10px;
	}

	.shooter {
		background-color: green;
	}

	.laser {
		background-color: orange;
	}

	.boom {
		background-color: red;
	}
</style>
